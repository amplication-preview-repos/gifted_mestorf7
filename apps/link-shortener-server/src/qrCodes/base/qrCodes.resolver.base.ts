/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QrCodes } from "./QrCodes";
import { QrCodesCountArgs } from "./QrCodesCountArgs";
import { QrCodesFindManyArgs } from "./QrCodesFindManyArgs";
import { QrCodesFindUniqueArgs } from "./QrCodesFindUniqueArgs";
import { CreateQrCodesArgs } from "./CreateQrCodesArgs";
import { UpdateQrCodesArgs } from "./UpdateQrCodesArgs";
import { DeleteQrCodesArgs } from "./DeleteQrCodesArgs";
import { Links } from "../../links/base/Links";
import { QrCodesCreateInput } from "./QrCodesCreateInput";
import { QrCodesService } from "../qrCodes.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QrCodes)
export class QrCodesResolverBase {
  constructor(
    protected readonly service: QrCodesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "read",
    possession: "any",
  })
  async _qrCodesItemsMeta(
    @graphql.Args() args: QrCodesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QrCodes])
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "read",
    possession: "any",
  })
  async qrCodesItems(
    @graphql.Args() args: QrCodesFindManyArgs
  ): Promise<QrCodes[]> {
    return this.service.qrCodesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QrCodes, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "read",
    possession: "own",
  })
  async qrCodes(
    @graphql.Args() args: QrCodesFindUniqueArgs
  ): Promise<QrCodes | null> {
    const result = await this.service.qrCodes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QrCodes)
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "create",
    possession: "any",
  })
  async createQrCodes(
    @graphql.Args() args: CreateQrCodesArgs
  ): Promise<QrCodes> {
    return await this.service.createQrCodes({
      ...args,
      data: {
        ...args.data,

        link: args.data.link
          ? {
              connect: args.data.link,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QrCodes)
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "update",
    possession: "any",
  })
  async updateQrCodes(
    @graphql.Args() args: UpdateQrCodesArgs
  ): Promise<QrCodes | null> {
    try {
      return await this.service.updateQrCodes({
        ...args,
        data: {
          ...args.data,

          link: args.data.link
            ? {
                connect: args.data.link,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QrCodes)
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "delete",
    possession: "any",
  })
  async deleteQrCodes(
    @graphql.Args() args: DeleteQrCodesArgs
  ): Promise<QrCodes | null> {
    try {
      return await this.service.deleteQrCodes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QrCodes)
  async uploadQrCodeImage(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: QrCodesFindUniqueArgs
  ): Promise<QrCodes> {
    return await this.service.uploadQrCodeImage(args, file);
  }

  @graphql.Mutation(() => QrCodes)
  async deleteQrCodeImage(
    @graphql.Args()
    args: QrCodesFindUniqueArgs
  ): Promise<QrCodes> {
    return await this.service.deleteQrCodeImage(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Links, {
    nullable: true,
    name: "link",
  })
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "read",
    possession: "any",
  })
  async getLink(@graphql.Parent() parent: QrCodes): Promise<Links | null> {
    const result = await this.service.getLink(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QrCodes)
  async GenerateQrCode(
    @graphql.Args()
    args: QrCodesCreateInput
  ): Promise<QrCodes> {
    return this.service.GenerateQrCode(args);
  }
}
