/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  QrCodes as PrismaQrCodes,
  Links as PrismaLinks,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";
import { QrCodesCreateInput } from "./QrCodesCreateInput";
import { QrCodes } from "./QrCodes";

export class QrCodesServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.QrCodesCountArgs, "select">): Promise<number> {
    return this.prisma.qrCodes.count(args);
  }

  async qrCodesItems(
    args: Prisma.QrCodesFindManyArgs
  ): Promise<PrismaQrCodes[]> {
    return this.prisma.qrCodes.findMany(args);
  }
  async qrCodes(
    args: Prisma.QrCodesFindUniqueArgs
  ): Promise<PrismaQrCodes | null> {
    return this.prisma.qrCodes.findUnique(args);
  }
  async createQrCodes(args: Prisma.QrCodesCreateArgs): Promise<PrismaQrCodes> {
    return this.prisma.qrCodes.create(args);
  }
  async updateQrCodes(args: Prisma.QrCodesUpdateArgs): Promise<PrismaQrCodes> {
    return this.prisma.qrCodes.update(args);
  }
  async deleteQrCodes(args: Prisma.QrCodesDeleteArgs): Promise<PrismaQrCodes> {
    return this.prisma.qrCodes.delete(args);
  }

  async uploadQrCodeImage<T extends Prisma.QrCodesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QrCodesFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaQrCodes> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "qrCodeImage";
    const qrCodeImage = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.qrCodes.update({
      where: args.where,

      data: {
        qrCodeImage: qrCodeImage as InputJsonValue,
      },
    });
  }

  async downloadQrCodeImage<T extends Prisma.QrCodesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QrCodesFindUniqueArgs>
  ): Promise<FileDownload> {
    const { qrCodeImage } = await this.prisma.qrCodes.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      qrCodeImage as unknown as LocalStorageFile
    );
  }

  async deleteQrCodeImage<T extends Prisma.QrCodesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QrCodesFindUniqueArgs>
  ): Promise<PrismaQrCodes> {
    const { qrCodeImage } = await this.prisma.qrCodes.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      qrCodeImage as unknown as LocalStorageFile
    );

    return await this.prisma.qrCodes.update({
      where: args.where,

      data: {
        qrCodeImage: Prisma.DbNull,
      },
    });
  }

  async getLink(parentId: string): Promise<PrismaLinks | null> {
    return this.prisma.qrCodes
      .findUnique({
        where: { id: parentId },
      })
      .link();
  }
  async GenerateQrCode(args: QrCodesCreateInput): Promise<QrCodes> {
    throw new Error("Not implemented");
  }
}
