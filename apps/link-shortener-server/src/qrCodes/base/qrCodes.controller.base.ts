/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { QrCodesService } from "../qrCodes.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QrCodesCreateInput } from "./QrCodesCreateInput";
import { QrCodes } from "./QrCodes";
import { QrCodesFindManyArgs } from "./QrCodesFindManyArgs";
import { QrCodesWhereUniqueInput } from "./QrCodesWhereUniqueInput";
import { QrCodesUpdateInput } from "./QrCodesUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class QrCodesControllerBase {
  constructor(
    protected readonly service: QrCodesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QrCodes })
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createQrCodes(
    @common.Body() data: QrCodesCreateInput
  ): Promise<QrCodes> {
    return await this.service.createQrCodes({
      data: {
        ...data,

        link: data.link
          ? {
              connect: data.link,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        link: {
          select: {
            id: true,
          },
        },

        qrCodeImage: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [QrCodes] })
  @ApiNestedQuery(QrCodesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async qrCodesItems(@common.Req() request: Request): Promise<QrCodes[]> {
    const args = plainToClass(QrCodesFindManyArgs, request.query);
    return this.service.qrCodesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,

        link: {
          select: {
            id: true,
          },
        },

        qrCodeImage: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QrCodes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async qrCodes(
    @common.Param() params: QrCodesWhereUniqueInput
  ): Promise<QrCodes | null> {
    const result = await this.service.qrCodes({
      where: params,
      select: {
        createdAt: true,
        id: true,

        link: {
          select: {
            id: true,
          },
        },

        qrCodeImage: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QrCodes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateQrCodes(
    @common.Param() params: QrCodesWhereUniqueInput,
    @common.Body() data: QrCodesUpdateInput
  ): Promise<QrCodes | null> {
    try {
      return await this.service.updateQrCodes({
        where: params,
        data: {
          ...data,

          link: data.link
            ? {
                connect: data.link,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          link: {
            select: {
              id: true,
            },
          },

          qrCodeImage: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QrCodes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteQrCodes(
    @common.Param() params: QrCodesWhereUniqueInput
  ): Promise<QrCodes | null> {
    try {
      return await this.service.deleteQrCodes({
        where: params,
        select: {
          createdAt: true,
          id: true,

          link: {
            select: {
              id: true,
            },
          },

          qrCodeImage: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/qrCodeImage")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: QrCodes,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadQrCodeImage(
    @common.Param()
    params: QrCodesWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<QrCodes> {
    return this.service.uploadQrCodeImage(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/qrCodeImage")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadQrCodeImage(
    @common.Param()
    params: QrCodesWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadQrCodeImage({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/qrCodeImage")
  @swagger.ApiOkResponse({
    type: QrCodes,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteQrCodeImage(
    @common.Param()
    params: QrCodesWhereUniqueInput
  ): Promise<QrCodes> {
    return this.service.deleteQrCodeImage({
      where: params,
    });
  }

  @common.Post("/generate-qr")
  @swagger.ApiOkResponse({
    type: QrCodes,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateQrCode(
    @common.Body()
    body: QrCodesCreateInput
  ): Promise<QrCodes> {
    return this.service.GenerateQrCode(body);
  }
}
