/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Links as PrismaLinks,
  QrCodes as PrismaQrCodes,
  Projects as PrismaProjects,
} from "@prisma/client";

import { LinksCreateInput } from "./LinksCreateInput";
import { Links } from "./Links";

export class LinksServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LinksCountArgs, "select">): Promise<number> {
    return this.prisma.links.count(args);
  }

  async linksItems(args: Prisma.LinksFindManyArgs): Promise<PrismaLinks[]> {
    return this.prisma.links.findMany(args);
  }
  async links(args: Prisma.LinksFindUniqueArgs): Promise<PrismaLinks | null> {
    return this.prisma.links.findUnique(args);
  }
  async createLinks(args: Prisma.LinksCreateArgs): Promise<PrismaLinks> {
    return this.prisma.links.create(args);
  }
  async updateLinks(args: Prisma.LinksUpdateArgs): Promise<PrismaLinks> {
    return this.prisma.links.update(args);
  }
  async deleteLinks(args: Prisma.LinksDeleteArgs): Promise<PrismaLinks> {
    return this.prisma.links.delete(args);
  }

  async findQrCodesItems(
    parentId: string,
    args: Prisma.QrCodesFindManyArgs
  ): Promise<PrismaQrCodes[]> {
    return this.prisma.links
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .qrCodesItems(args);
  }

  async getProject(parentId: string): Promise<PrismaProjects | null> {
    return this.prisma.links
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
  async ShortenLink(args: LinksCreateInput): Promise<Links> {
    throw new Error("Not implemented");
  }
}
