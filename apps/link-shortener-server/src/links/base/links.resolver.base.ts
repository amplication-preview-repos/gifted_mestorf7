/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Links } from "./Links";
import { LinksCountArgs } from "./LinksCountArgs";
import { LinksFindManyArgs } from "./LinksFindManyArgs";
import { LinksFindUniqueArgs } from "./LinksFindUniqueArgs";
import { CreateLinksArgs } from "./CreateLinksArgs";
import { UpdateLinksArgs } from "./UpdateLinksArgs";
import { DeleteLinksArgs } from "./DeleteLinksArgs";
import { QrCodesFindManyArgs } from "../../qrCodes/base/QrCodesFindManyArgs";
import { QrCodes } from "../../qrCodes/base/QrCodes";
import { Projects } from "../../projects/base/Projects";
import { LinksCreateInput } from "./LinksCreateInput";
import { LinksService } from "../links.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Links)
export class LinksResolverBase {
  constructor(
    protected readonly service: LinksService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "read",
    possession: "any",
  })
  async _linksItemsMeta(
    @graphql.Args() args: LinksCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Links])
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "read",
    possession: "any",
  })
  async linksItems(@graphql.Args() args: LinksFindManyArgs): Promise<Links[]> {
    return this.service.linksItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Links, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "read",
    possession: "own",
  })
  async links(
    @graphql.Args() args: LinksFindUniqueArgs
  ): Promise<Links | null> {
    const result = await this.service.links(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Links)
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "create",
    possession: "any",
  })
  async createLinks(@graphql.Args() args: CreateLinksArgs): Promise<Links> {
    return await this.service.createLinks({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Links)
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "update",
    possession: "any",
  })
  async updateLinks(
    @graphql.Args() args: UpdateLinksArgs
  ): Promise<Links | null> {
    try {
      return await this.service.updateLinks({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Links)
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "delete",
    possession: "any",
  })
  async deleteLinks(
    @graphql.Args() args: DeleteLinksArgs
  ): Promise<Links | null> {
    try {
      return await this.service.deleteLinks(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QrCodes], { name: "qrCodesItems" })
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "read",
    possession: "any",
  })
  async findQrCodesItems(
    @graphql.Parent() parent: Links,
    @graphql.Args() args: QrCodesFindManyArgs
  ): Promise<QrCodes[]> {
    const results = await this.service.findQrCodesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Projects, {
    nullable: true,
    name: "project",
  })
  @nestAccessControl.UseRoles({
    resource: "Projects",
    action: "read",
    possession: "any",
  })
  async getProject(@graphql.Parent() parent: Links): Promise<Projects | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Links)
  async ShortenLink(
    @graphql.Args()
    args: LinksCreateInput
  ): Promise<Links> {
    return this.service.ShortenLink(args);
  }
}
