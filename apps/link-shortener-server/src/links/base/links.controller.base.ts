/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { LinksService } from "../links.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { LinksCreateInput } from "./LinksCreateInput";
import { Links } from "./Links";
import { LinksFindManyArgs } from "./LinksFindManyArgs";
import { LinksWhereUniqueInput } from "./LinksWhereUniqueInput";
import { LinksUpdateInput } from "./LinksUpdateInput";
import { QrCodesFindManyArgs } from "../../qrCodes/base/QrCodesFindManyArgs";
import { QrCodes } from "../../qrCodes/base/QrCodes";
import { QrCodesWhereUniqueInput } from "../../qrCodes/base/QrCodesWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class LinksControllerBase {
  constructor(
    protected readonly service: LinksService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Links })
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createLinks(@common.Body() data: LinksCreateInput): Promise<Links> {
    return await this.service.createLinks({
      data: {
        ...data,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        originalUrl: true,

        project: {
          select: {
            id: true,
          },
        },

        shortenedUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Links] })
  @ApiNestedQuery(LinksFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async linksItems(@common.Req() request: Request): Promise<Links[]> {
    const args = plainToClass(LinksFindManyArgs, request.query);
    return this.service.linksItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        originalUrl: true,

        project: {
          select: {
            id: true,
          },
        },

        shortenedUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Links })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async links(
    @common.Param() params: LinksWhereUniqueInput
  ): Promise<Links | null> {
    const result = await this.service.links({
      where: params,
      select: {
        createdAt: true,
        id: true,
        originalUrl: true,

        project: {
          select: {
            id: true,
          },
        },

        shortenedUrl: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Links })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateLinks(
    @common.Param() params: LinksWhereUniqueInput,
    @common.Body() data: LinksUpdateInput
  ): Promise<Links | null> {
    try {
      return await this.service.updateLinks({
        where: params,
        data: {
          ...data,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          originalUrl: true,

          project: {
            select: {
              id: true,
            },
          },

          shortenedUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Links })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteLinks(
    @common.Param() params: LinksWhereUniqueInput
  ): Promise<Links | null> {
    try {
      return await this.service.deleteLinks({
        where: params,
        select: {
          createdAt: true,
          id: true,
          originalUrl: true,

          project: {
            select: {
              id: true,
            },
          },

          shortenedUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/qrCodesItems")
  @ApiNestedQuery(QrCodesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QrCodes",
    action: "read",
    possession: "any",
  })
  async findQrCodesItems(
    @common.Req() request: Request,
    @common.Param() params: LinksWhereUniqueInput
  ): Promise<QrCodes[]> {
    const query = plainToClass(QrCodesFindManyArgs, request.query);
    const results = await this.service.findQrCodesItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        link: {
          select: {
            id: true,
          },
        },

        qrCodeImage: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/qrCodesItems")
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "update",
    possession: "any",
  })
  async connectQrCodesItems(
    @common.Param() params: LinksWhereUniqueInput,
    @common.Body() body: QrCodesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qrCodesItems: {
        connect: body,
      },
    };
    await this.service.updateLinks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/qrCodesItems")
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "update",
    possession: "any",
  })
  async updateQrCodesItems(
    @common.Param() params: LinksWhereUniqueInput,
    @common.Body() body: QrCodesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qrCodesItems: {
        set: body,
      },
    };
    await this.service.updateLinks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/qrCodesItems")
  @nestAccessControl.UseRoles({
    resource: "Links",
    action: "update",
    possession: "any",
  })
  async disconnectQrCodesItems(
    @common.Param() params: LinksWhereUniqueInput,
    @common.Body() body: QrCodesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qrCodesItems: {
        disconnect: body,
      },
    };
    await this.service.updateLinks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/shorten")
  @swagger.ApiOkResponse({
    type: Links,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ShortenLink(
    @common.Body()
    body: LinksCreateInput
  ): Promise<Links> {
    return this.service.ShortenLink(body);
  }
}
