/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Invitations } from "./Invitations";
import { InvitationsCountArgs } from "./InvitationsCountArgs";
import { InvitationsFindManyArgs } from "./InvitationsFindManyArgs";
import { InvitationsFindUniqueArgs } from "./InvitationsFindUniqueArgs";
import { CreateInvitationsArgs } from "./CreateInvitationsArgs";
import { UpdateInvitationsArgs } from "./UpdateInvitationsArgs";
import { DeleteInvitationsArgs } from "./DeleteInvitationsArgs";
import { InvitationsService } from "../invitations.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Invitations)
export class InvitationsResolverBase {
  constructor(
    protected readonly service: InvitationsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Invitations",
    action: "read",
    possession: "any",
  })
  async _invitationsItemsMeta(
    @graphql.Args() args: InvitationsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Invitations])
  @nestAccessControl.UseRoles({
    resource: "Invitations",
    action: "read",
    possession: "any",
  })
  async invitationsItems(
    @graphql.Args() args: InvitationsFindManyArgs
  ): Promise<Invitations[]> {
    return this.service.invitationsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Invitations, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Invitations",
    action: "read",
    possession: "own",
  })
  async invitations(
    @graphql.Args() args: InvitationsFindUniqueArgs
  ): Promise<Invitations | null> {
    const result = await this.service.invitations(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Invitations)
  @nestAccessControl.UseRoles({
    resource: "Invitations",
    action: "create",
    possession: "any",
  })
  async createInvitations(
    @graphql.Args() args: CreateInvitationsArgs
  ): Promise<Invitations> {
    return await this.service.createInvitations({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Invitations)
  @nestAccessControl.UseRoles({
    resource: "Invitations",
    action: "update",
    possession: "any",
  })
  async updateInvitations(
    @graphql.Args() args: UpdateInvitationsArgs
  ): Promise<Invitations | null> {
    try {
      return await this.service.updateInvitations({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Invitations)
  @nestAccessControl.UseRoles({
    resource: "Invitations",
    action: "delete",
    possession: "any",
  })
  async deleteInvitations(
    @graphql.Args() args: DeleteInvitationsArgs
  ): Promise<Invitations | null> {
    try {
      return await this.service.deleteInvitations(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
