/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Invitations as PrismaInvitations } from "@prisma/client";

export class InvitationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InvitationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.invitations.count(args);
  }

  async invitationsItems(
    args: Prisma.InvitationsFindManyArgs
  ): Promise<PrismaInvitations[]> {
    return this.prisma.invitations.findMany(args);
  }
  async invitations(
    args: Prisma.InvitationsFindUniqueArgs
  ): Promise<PrismaInvitations | null> {
    return this.prisma.invitations.findUnique(args);
  }
  async createInvitations(
    args: Prisma.InvitationsCreateArgs
  ): Promise<PrismaInvitations> {
    return this.prisma.invitations.create(args);
  }
  async updateInvitations(
    args: Prisma.InvitationsUpdateArgs
  ): Promise<PrismaInvitations> {
    return this.prisma.invitations.update(args);
  }
  async deleteInvitations(
    args: Prisma.InvitationsDeleteArgs
  ): Promise<PrismaInvitations> {
    return this.prisma.invitations.delete(args);
  }
}
