/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SubscriptionPlansService } from "../subscriptionPlans.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SubscriptionPlansCreateInput } from "./SubscriptionPlansCreateInput";
import { SubscriptionPlans } from "./SubscriptionPlans";
import { SubscriptionPlansFindManyArgs } from "./SubscriptionPlansFindManyArgs";
import { SubscriptionPlansWhereUniqueInput } from "./SubscriptionPlansWhereUniqueInput";
import { SubscriptionPlansUpdateInput } from "./SubscriptionPlansUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SubscriptionPlansControllerBase {
  constructor(
    protected readonly service: SubscriptionPlansService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubscriptionPlans })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSubscriptionPlans(
    @common.Body() data: SubscriptionPlansCreateInput
  ): Promise<SubscriptionPlans> {
    return await this.service.createSubscriptionPlans({
      data: data,
      select: {
        createdAt: true,
        id: true,
        linksLimit: true,
        name: true,
        price: true,
        projectsLimit: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SubscriptionPlans] })
  @ApiNestedQuery(SubscriptionPlansFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subscriptionPlansItems(
    @common.Req() request: Request
  ): Promise<SubscriptionPlans[]> {
    const args = plainToClass(SubscriptionPlansFindManyArgs, request.query);
    return this.service.subscriptionPlansItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        linksLimit: true,
        name: true,
        price: true,
        projectsLimit: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionPlans })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subscriptionPlans(
    @common.Param() params: SubscriptionPlansWhereUniqueInput
  ): Promise<SubscriptionPlans | null> {
    const result = await this.service.subscriptionPlans({
      where: params,
      select: {
        createdAt: true,
        id: true,
        linksLimit: true,
        name: true,
        price: true,
        projectsLimit: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionPlans })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSubscriptionPlans(
    @common.Param() params: SubscriptionPlansWhereUniqueInput,
    @common.Body() data: SubscriptionPlansUpdateInput
  ): Promise<SubscriptionPlans | null> {
    try {
      return await this.service.updateSubscriptionPlans({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          linksLimit: true,
          name: true,
          price: true,
          projectsLimit: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionPlans })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlans",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSubscriptionPlans(
    @common.Param() params: SubscriptionPlansWhereUniqueInput
  ): Promise<SubscriptionPlans | null> {
    try {
      return await this.service.deleteSubscriptionPlans({
        where: params,
        select: {
          createdAt: true,
          id: true,
          linksLimit: true,
          name: true,
          price: true,
          projectsLimit: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/subscriptions")
  @swagger.ApiOkResponse({
    type: SubscriptionPlans,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ManageSubscription(
    @common.Body()
    body: SubscriptionPlansCreateInput
  ): Promise<SubscriptionPlans> {
    return this.service.ManageSubscription(body);
  }
}
